# -*- coding: utf-8 -*-
"""Congressional Age.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mMxeivIyYwOAjxei6q3PW0ouznhtrHMW

# Creating a Descriptive Statistic Summary Report
The purpose of this notebook is to utilize pandas, matpoltlib.pyplot, and a library of functions as listed in lib.py to analyze and visualize a dataset.
"""

# First we start by importing the functions in lib
import pandas as pd
import matplotlib.pyplot as plt


# Creating functions to load data
def load_dataset(datasource):
    dataframe = pd.read_csv(datasource)
    return dataframe


# Creating functions to pull statistical data from a specific column and from the dataset in its entirety


def grab_stdev(dataframe, col):
    print(dataframe[col].std())


def grab_max(dataframe, col):
    return dataframe[col].max()


def grab_mean(dataframe, col):
    return dataframe[col].mean()


def grab_median(dataframe, col):
    return dataframe[col].median()


def get_summary_stats(dataframe, col):
    desc_stats = dataframe[col].describe()
    return desc_stats


# Then, we call the functions to read the data in..
dataframe = load_dataset("sample_data/data_aging_congress.csv")
dataframe.sample(10)

# Calling the functions to calculate and create a table for descriptive statistics
desc_stats = get_summary_stats(dataframe, "age_years")
print(desc_stats)

# Creation of function to create (2) charts

# This function creates a histogram the maps the ages of all Congressmemebers within the database


def hist_cong_age(general_df, col):
    """builds a histogram for the ages of all Congressmembers"""

    plt.hist(general_df[col], bins=20, edgecolor="black")
    plt.title("Distribution of Ages in Congress", fontsize=16)
    plt.xlabel("Age", fontsize=14)
    plt.ylabel("Frequency", fontsize=14)
    plt.savefig("output/congressional_age.png")


# This function creates a histogram the maps the distribution of ages across both chambers of Congress
def age_dist_50(general_df, desc_stats):
    """builds a bar graph that demonstrates distribution of age cross chambers"""
    # Convert 'start_date' column to datetime format
    general_df["start_date"] = pd.to_datetime(general_df["start_date"])

    # Bin the ages into 5-year intervals
    general_df["age_group"] = pd.cut(
        general_df["age_years"], bins=range(20, 101, 5), right=False
    )

    # Group by chamber and age group to get frequency counts
    chamber_age_group_counts = (
        general_df.groupby(["chamber", "age_group"], observed=False)
        .size()
        .unstack(fill_value=0)
    )
    # Plot a bar graph for each chamber's age distribution (with binned ages)
    chamber_age_group_counts.T.plot(kind="bar", figsize=(12, 8), stacked=False)
    plt.title("Age Distribution by Chamber in Congress (Binned)")
    plt.xlabel("Age Group (Years)")
    plt.ylabel("Frequency")
    plt.legend(title="Chamber", bbox_to_anchor=(1.05, 1), loc="upper left")
    plt.tight_layout()
    plt.savefig("output/chamber_age.png")


# Run the functions to return the charts
hist_cong_age(dataframe, "age_years")
age_dist_50(dataframe, desc_stats)


# To manipulate data, we are creating a function for data manipluation to subset data on a specific generation and will return the descriptive statistics for the dataset.
def subset(dataframe, conditonal):
    dataframe_gen = dataframe[dataframe["generation"] == conditonal]
    return dataframe_gen


dataframe_gen = subset(dataframe, "Lost")
print(dataframe_gen.sample(5))

desc_stats = get_summary_stats(dataframe, "cmltv_cong")
print(desc_stats)
